name: CI/CD Backend

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Escolha a aÃ§Ã£o Terraform a executar (apply ou destroy)"
        required: true
        default: "apply"
  push:
    branches: [main]
  pull_request:

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      - name: Terraform Init
        run: terraform -chdir=terraform init -input=false

      - name: Terraform Validate
        run: terraform -chdir=terraform validate

      # Executa o Terraform Plan (sempre)
      - name: Terraform Plan
        run: terraform -chdir=terraform plan -out=tfplan

      # ðŸš€ AÃ§Ã£o condicional: APPLY
      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' || github.event_name != 'workflow_dispatch' }}
        run: terraform -chdir=terraform apply -auto-approve tfplan

      # ðŸ’£ AÃ§Ã£o condicional: DESTROY
      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform -chdir=terraform destroy -auto-approve

      # Somente roda os testes e upload se for APPLY
      - name: Wait for API to be ready
        if: ${{ github.event.inputs.action == 'apply' || github.event_name != 'workflow_dispatch' }}
        run: sleep 30

      # - name: Run tests
      #   if: ${{ github.event.inputs.action == 'apply' || github.event_name != 'workflow_dispatch' }}
      #   run: pytest -v tests/

      # - name: Wait for S3 bucket availability
      #   run: |
      #     for i in {1..10}; do
      #       if aws s3api head-bucket --bucket "${{ env.S3_BUCKET_NAME }}" 2>/dev/null; then
      #         echo "Bucket found!"
      #         break
      #       fi
      #       echo "Waiting for bucket to be ready..."
      #       sleep 15
      #     done


      - name: Upload static files to S3
        if: ${{ github.event.inputs.action == 'apply' && success() }}
        run: |
          aws s3 sync . s3://aws---cloud-resume-challenge-2025-bucket-s3 \
            --exclude "*" \
            --include "*.html" \
            --include "*.css" \
            --include "*.js" \
            --include "*.png" \
            --delete

      - name: Invalidate CloudFront cache
        if: ${{ github.event.inputs.action == 'apply' && success() }}
        run: |
          DISTRIBUTION_ID=$(terraform -chdir=terraform output -raw cloudfront_distribution_id)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
